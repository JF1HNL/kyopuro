{
  "init" : {
    "prefix": "init",
    "body": [
      "def main():",
      "\t${1:n = int(input())}",
      "",
      "main()"
    ]
  },
  "listmap" : {
    "prefix": "listmap",
    "body": "list(map(int, input().split()))"
  },
  "inputsplit" : {
    "prefix": "inputsplit",
    "body": "input().split($1)"
  },
  "intinput" : {
    "prefix": "intinput",
    "body": "int(input())"
  },
  "nijigen" : {
    "prefix": "[list(map(int, input().split())) for _ in [0] * n]",
    "body": "[list(map(int, input().split())) for _ in [0] * ${1:n}]"
  },
  "saiki" : {
    "prefix": "saiki",
    "body": [
      "import sys",
      "sys.setrecursionlimit(10**6)"
    ]
  },
  "symbol" : {
    "prefix": ["SYMBOL", "symbol"],
    "body": "SYMBOL = \"abcdefghijklmnopqrstuvwxyz\""
  },
  "inf早い" : {
    "prefix": ["inf", "INF"],
    "body": "INF = 10 ** 18",
    "description": "早い"
  },
  "inf遅い" : {
    "prefix": ["inf", "INF"],
    "body": "INF = float(\"inf\")",
    "description": "遅い"
  },
  "max2個" : {
    "prefix": "max",
    "body": "${1:hoge} if ${1:hoge} >= ${2:huga} else ${2:huga}"
  },
  "min2個" : {
    "prefix": "min",
    "body": "${1:hoge} if ${1:hoge} <= ${2:huga} else ${2:huga}"
  },
  "二分探索" : {
    "prefix": "nibun",
    "body": [
      "# https://qiita.com/T_Wakasugi/items/c979e977f56531942de4",
      "from bisect import bisect_left, bisect_right, insort"
    ]
  },
  "優先度付キュー" : {
    "prefix": "yuusendo",
    "body": [
      "# https://qiita.com/ell/items/fe52a9eb9499b7060ed6",
      "from heapq import heapify, heappop, heappush"
    ]
  },
  "配列が早くなるやつインポート" : {
    "prefix": "array_import",
    "body": "from array import array"
  },
  "配列が早くなるやつ関数" : {
    "prefix": "array_func",
    "body": "array(\"i\", ${1:[0, 1, 2]})"
  },
  "キュー" : {
    "prefix": "deque",
    "body": [
      "# リストの両端の削除が早くなる。先頭に追加できる",
      "# https://qiita.com/ryosuke0825/items/bbc5c0673e6c6c958d66",
      "from collections import deque"
    ]
  },
  "Counter" : {
    "prefix": "Counter",
    "body": "from collections import Counter"
  },
  "累積和": {
    "prefix": "ruiseki",
    "body": "from itertools import accumulate"
  },
  "コンビネーション": {
    "prefix": "combination",
    "body": [
      "from math import factorial",
      "def nCk(n, k):",
      "\treturn factorial(n) // (factorial(k) * factorial(n - k))"
    ]
  },
  "defaultdict": {
    "prefix": "defaultdict",
    "body": "from collections import defaultdict"
  },
  "fraction" : {
    "prefix": "fraction",
    "body": "from fractions import Fraction"
  },
  "debug" : {
    "prefix": "def debug()",
    "body": [
      "def debug(*e):",
      "\tif \"localdebug\" in globals():",
      "\t\tprint(\"debug\", *e)"
    ]
  },
  "number UnionFind" : {
    "prefix": "unionfind",
    "description": "数字しか使えない",
    "body": [
      "# https://amateur-engineer-blog.com/union-find/#toc7",
      "from collections import defaultdict",
      "",
      "class UnionFind():",
      "\t\"\"\"",
      "\tUnion Find木クラス",
      "",
      "\tAttributes",
      "\t--------------------",
      "\tn : int",
      "\t\t要素数",
      "\troot : list",
      "\t\t木の要素数",
      "\t\t0未満であればそのノードが根であり、添字の値が要素数",
      "\trank : list",
      "\t\t木の深さ",
      "\t\"\"\"",
      "",
      "\tdef __init__(self, n):",
      "\t\t\"\"\"",
      "\t\tParameters",
      "\t\t---------------------",
      "\t\tn : int",
      "\t\t\t要素数",
      "\t\t\"\"\"",
      "\t\tself.n = n",
      "\t\tself.root = [-1]*(n+1)",
      "\t\tself.rank = [0]*(n+1)",
      "",
      "\tdef find(self, x):",
      "\t\t\"\"\"",
      "\t\tノードxの根を見つける",
      "",
      "\t\tParameters",
      "\t\t---------------------",
      "\t\tx : int",
      "\t\t\t見つけるノード",
      "",
      "\t\tReturns",
      "\t\t---------------------",
      "\t\troot : int",
      "\t\t\t根のノード",
      "\t\t\"\"\"",
      "\t\tif(self.root[x] < 0):",
      "\t\t\treturn x",
      "\t\telse:",
      "\t\t\tself.root[x] = self.find(self.root[x])",
      "\t\t\treturn self.root[x]",
      "",
      "\tdef unite(self, x, y):",
      "\t\t\"\"\"",
      "\t\t木の併合",
      "",
      "\t\tParameters",
      "\t\t---------------------",
      "\t\tx : int",
      "\t\t\t併合したノード",
      "\t\ty : int",
      "\t\t\t併合したノード",
      "\t\t\"\"\"",
      "\t\tx = self.find(x)",
      "\t\ty = self.find(y)",
      "",
      "\t\tif(x == y):",
      "\t\t\treturn",
      "\t\telif(self.rank[x] > self.rank[y]):",
      "\t\t\tself.root[x] += self.root[y]",
      "\t\t\tself.root[y] = x",
      "\t\telse:",
      "\t\t\tself.root[y] += self.root[x]",
      "\t\t\tself.root[x] = y",
      "\t\t\tif(self.rank[x] == self.rank[y]):",
      "\t\t\t\tself.rank[y] += 1",
      "",
      "\tdef same(self, x, y):",
      "\t\t\"\"\"",
      "\t\t同じグループに属するか判定",
      "",
      "\t\tParameters",
      "\t\t---------------------",
      "\t\tx : int",
      "\t\t\t判定したノード",
      "\t\ty : int",
      "\t\t\t判定したノード",
      "",
      "\t\tReturns",
      "\t\t---------------------",
      "\t\tans : bool",
      "\t\t\t同じグループに属しているか",
      "\t\t\"\"\"",
      "\t\treturn self.find(x) == self.find(y)",
      "",
      "\tdef size(self, x):",
      "\t\t\"\"\"",
      "\t\t木のサイズを計算",
      "",
      "\t\tParameters",
      "\t\t---------------------",
      "\t\tx : int",
      "\t\t\t計算したい木のノード",
      "",
      "\t\tReturns",
      "\t\t---------------------",
      "\t\tsize : int",
      "\t\t\t木のサイズ",
      "\t\t\"\"\"",
      "\t\treturn -self.root[self.find(x)]",
      "",
      "\tdef roots(self):",
      "\t\t\"\"\"",
      "\t\t根のノードを取得",
      "",
      "\t\tReturns",
      "\t\t---------------------",
      "\t\troots : list",
      "\t\t\t根のノード",
      "\t\t\"\"\"",
      "\t\treturn [i for i, x in enumerate(self.root) if x < 0]",
      "",
      "\tdef group_size(self):",
      "\t\t\"\"\"",
      "\t\tグループ数を取得",
      "",
      "\t\tReturns",
      "\t\t---------------------",
      "\t\tsize : int",
      "\t\t\tグループ数",
      "\t\t\"\"\"",
      "\t\treturn len(self.roots())",
      "",
      "\tdef group_members(self):",
      "\t\t\"\"\"",
      "\t\t全てのグループごとのノードを取得",
      "",
      "\t\tReturns",
      "\t\t---------------------",
      "\t\tgroup_members : defaultdict",
      "\t\t\t根をキーとしたノードのリスト",
      "\t\t\"\"\"",
      "\t\tgroup_members = defaultdict(list)",
      "\t\tfor member in range(self.n):",
      "\t\t\tgroup_members[self.find(member)].append(member)",
      "\t\treturn group_members",
      "",
      "\tdef members(self, x):",
      "\t\t\"\"\"",
      "\t\t含まれるグループの一覧を出力",
      "",
      "\t\tReturns",
      "\t\t---------------------",
      "\t\tmembers : list",
      "\t\t\tメンバー一覧",
      "\t\t\"\"\"",
      "\t\tgroup_members = self.group_members()",
      "\t\treturn group_members[self.find(x)]"
    ]
  },
  "tupple UnionFInd" : {
    "prefix": "unionfind",
    "description": "タプルが使える",
    "body": [
      "# https://qiita.com/tomato1997/items/7c001c2a9a1e7f428241",
      "import collections",
      "class UnionFind():",
      "\tdef __init__(self):",
      "\t\t'''",
      "\t\tunionfind経路圧縮あり,要素にtupleや文字列可,始めに要素数指定なし",
      "\t\t'''",
      "\t\tself.parents = dict()                                      # {子要素:親ID,}",
      "\t\tself.members_set = collections.defaultdict(lambda : set()) # keyが根でvalueが根に属する要素要素(tupleや文字列可)",
      "\t\tself.roots_set = set()                                     # 根の集合(tupleや文字列可)",
      "\t\tself.key_ID = dict()                                       # 各要素にIDを割り振る",
      "\t\tself.ID_key = dict()                                       # IDから要素名を復元する",
      "\t\tself.cnt = 0                                               # IDのカウンター",
      "",
      "\tdef dictf(self,x): # 要素名とIDをやり取りするところ",
      "\t\tif x in self.key_ID:",
      "\t\t\treturn self.key_ID[x]",
      "\t\telse:",
      "\t\t\tself.cnt += 1",
      "\t\t\tself.key_ID[x] = self.cnt",
      "\t\t\tself.parents[x] = self.cnt",
      "\t\t\tself.ID_key[self.cnt] = x",
      "\t\t\tself.members_set[x].add(x)",
      "\t\t\tself.roots_set.add(x)",
      "\t\t\treturn self.key_ID[x]",
      "",
      "\tdef find(self, x):",
      "\t\tID_x = self.dictf(x)",
      "\t\tif self.parents[x] == ID_x:",
      "\t\t\treturn x",
      "\t\telse:",
      "\t\t\tself.parents[x] = self.key_ID[self.find(self.ID_key[self.parents[x]])]",
      "\t\t\treturn self.ID_key[self.parents[x]]",
      "",
      "\tdef union(self, x, y):",
      "\t\tx = self.find(x)",
      "\t\ty = self.find(y)",
      "\t\tif self.parents[x] > self.parents[y]:",
      "\t\t\tx, y = y, x",
      "\t\tif x == y:",
      "\t\t\treturn",
      "\t\tfor i in self.members_set[y]:",
      "\t\t\tself.members_set[x].add(i)",
      "\t\tself.members_set[y] = set()",
      "\t\tself.roots_set.remove(y)",
      "\t\tself.parents[y] = self.key_ID[x]",
      "",
      "\tdef size(self, x):#xが含まれる集合の要素数",
      "\t\treturn len(self.members_set[self.find(x)])",
      "",
      "\tdef same(self, x, y):#同じ集合に属するかの判定",
      "\t\treturn self.find(x) == self.find(y)",
      "",
      "\tdef members(self, x):#xを含む集合の要素",
      "\t\treturn self.members_set[self.find(x)]",
      "",
      "\tdef roots(self):#根の要素",
      "\t\treturn self.roots_set",
      "",
      "\tdef group_count(self):#根の数",
      "\t\treturn len(self.roots_set)",
      "",
      "\tdef all_group_members(self):#根とその要素",
      "\t\treturn {r: self.members_set[r] for r in self.roots_set}"
    ]
  }, 
  "soinsu":{
    "prefix": "soinsu",
    "description": "素因数分解",
    "body": [
      "# https://qiita.com/snow67675476/items/e87ddb9285e27ea555f8",
      "\"\"\"nを素因数分解\"\"\"",
      "\"\"\"2以上の整数n => [[素因数, 指数], ...]の2次元リスト\"\"\"",
      "", 
      "def factorization(n):",
      "\tarr = []",
      "\ttemp = n",
      "\tfor i in range(2, int(-(-n**0.5//1))+1):",
      "\t\tif temp%i==0:",
      "\t\t\tcnt=0",
      "\t\t\twhile temp%i==0:",
      "\t\t\t\tcnt+=1",
      "\t\t\t\ttemp //= i",
      "\t\t\tarr.append([i, cnt])",
      "",
      "\tif temp!=1:",
      "\t\tarr.append([temp, 1])",
      "",
      "\tif arr==[]:",
      "\t\tarr.append([n, 1])",
      "",
      "\treturn arr",
      "## [[2, 3], [3, 1]] ",
      "##  24 = 2^3 * 3^1"
    ]
  }, 
  "query" : {
    "prefix": "query",
    "body": [
      "for _ in [0] * q:",
      "\tquery = list(map(int, input().split()))",
      "\tif query[0] == 1:",
      "\t\t_, x, y = query",
      "",
      "\telif query[0] == 2:",
      "\t\t_, x, y = query",
      "",
      "\telif query[0] == 3:",
      "\t\t_, x, y = query"
    ]
  }
}